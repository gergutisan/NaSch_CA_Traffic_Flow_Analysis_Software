import pandas as pdimport numpy as npimport matplotlib.pyplot as pltclass DataFrame:    def __init__(self,data, name):        self.data = data        self.data.columns = ["Density", "Flow", "Updates", "Density (HV)", "Flow (HV)", "Density (AV)",                              "Flow (AV)", "Number of Clusters","Average Cluster Size", "Probability of AV-AV", "Total Number of Lane Changes",                             "Total Number of Lane Changes (AV)", "Total Number of Lane Changes (HV)", "Clusterability"]                            self.density, self.flow, self.updates, self.densityrv, self.flowrv, self.densityav, self.flowav, self.clnum, self.avgclsize, self.prob, self.totlane, self.avlane, self.rvlane, self.carclus =  [           self.data[i].values for i in self.data.columns]         self.name = name        def printData(self):        print(self.data)        def getAverages(self):        print(self.data.mean())                    def getStats(self):        print("\nStatistical measures of terms:\n")        print(self.data.describe())        print("\nCorrelation between terms:\n")        print(self.data.corr())        print("\nCovariance between terms:\n")        print(self.data.cov())            def plotGraphs(self):        for i in self.data.columns:            plt.figure()            plt.plot(self.data[i])            plt.ylabel(i)            plt.xlabel("Timesteps")            plt.show()        def getDensity(self):        return self.data["Density"].values        #ldo.getStats()class CombinedDataFrame:    def __init__(self,regime,o,a,oa,b1,b2):        self.o = o        self.a = a        self.oa = oa        self.b1 = b1        self.b2 = b2        self.data = [self.o,self.a,self.oa,self.b1,self.b2]        self.regime = regime            def plotAll1(self):        self.plotProb("Probability of AV - AV", "Probability over time ("+str(self.regime)+")")        self.plotTotLane("Total Number of Lane Changes", "Lane changes over time ("+str(self.regime)+")")        self.plotAVLane("Total Number of Lane Changes (AV)", "AV Lane changes over time ("+str(self.regime)+")")        self.plotRVLane("Total Number of Lane Changes (HV)", "HV Lane changes over time ("+str(self.regime)+")")        self.plotAvgClusNum("Number of Clusters per Timestep", "Average Number Cluster over time ("+str(self.regime)+")")        self.plotAvgClusSize("Size of Clusters per Timestep", "Average Cluster Size over time ("+str(self.regime)+")")            def plotAll2(self):   #     self.plotProb("Probability of AV - AV", "Probability over time")   #     self.plotTotLane("Total Number of Lane Changes", "Lane changes over time")   #     self.plotAVLane("Total Number of Lane Changes (AV)", "AV Lane changes over time")   #     self.plotRVLane("Total Number of Lane Changes (HV)", "HV Lane changes over time")   #     self.PlotHVLCRate("HV Lane Change Rate", "HV Lane Change Rate")   #     self.PlotAVLCRate("AV Lane Change Rate", "AV Lane Change Rate")   #     self.PlotTotLCRate("Overall Lane Change Rate", "Lane Change Rate")        self.PlotPAV("Probability of AV trailing AV", "Probability")        self.PlotDelPAV("Change in Probability of AV trailing AV", "Probability")                            def PlotPAV(self,label,title):        for dat in self.data:            plt.plot(dat.updates,dat.prob, alpha=0.9, label=dat.name)            plt.ylabel(label)            plt.legend()            plt.xlabel("Timesteps")            plt.title(title)          #  plt.ylim(0.025,0.20)        plt.savefig("/Users/sshanto/techmrt/Python_new/draft_2/experiment_2/figures/run_9_paper/combined/"+title.replace(" ", "_")+".png")        plt.show()        def PlotDelPAV(self,label,title):        for dat in self.data:            PAV = dat.prob[::99]            dens = dat.updates[::99]            densi =  dens[1:]            delPAV = [dat.prob[i+1]-dat.prob[i] for i in range(len(PAV)-1)]            plt.plot(densi,delPAV, alpha=0.9, label=dat.name)            plt.ylabel(label)            plt.legend()            plt.xlabel("Timesteps")            plt.title(title)          #  plt.ylim(0.025,0.20)        plt.savefig("/Users/sshanto/techmrt/Python_new/draft_2/experiment_2/figures/run_9_paper/combined/"+title.replace(" ", "_")+".png")        plt.show()        def PlotHVLCRate(self,label,title):        for dat in self.data:            dens = self.getRate(dat.density, dat.avlane, dat.rvlane, dat.totlane, dat.densityrv, dat.densityav)[0]            hvlcr = self.getRate(dat.density, dat.avlane, dat.rvlane, dat.totlane, dat.densityrv, dat.densityav)[3]            plt.plot(dens,hvlcr, alpha=0.9, label=dat.name)       #     plt.scatter(dens,hvlcr, alpha=0.9)            plt.ylabel(label)            plt.legend()            plt.xlabel("System Density")            plt.title(title)          #  plt.ylim(0.025,0.20)        plt.savefig("/Users/sshanto/techmrt/Python_new/draft_2/experiment_2/figures/run_9_paper/combined/"+title.replace(" ", "_")+".png")        plt.show()        def PlotAVLCRate(self,label,title):        for dat in self.data:            dens = self.getRate(dat.density, dat.avlane, dat.rvlane, dat.totlane, dat.densityrv, dat.densityav)[0]            avlcr = self.getRate(dat.density, dat.avlane, dat.rvlane, dat.totlane, dat.densityrv, dat.densityav)[2]            plt.plot(dens,avlcr, alpha=0.9, label=dat.name)         #   plt.scatter(dens,avlcr, alpha=0.9)            plt.ylabel(label)            plt.legend()            plt.xlabel("System Density")            plt.title(title)          #  plt.ylim(0.025,0.20)        plt.savefig("/Users/sshanto/techmrt/Python_new/draft_2/experiment_2/figures/run_9_paper/combined/"+title.replace(" ", "_")+".png")        plt.show()         def PlotTotLCRate(self,label,title):        for dat in self.data:            dens = self.getRate(dat.density, dat.avlane, dat.rvlane, dat.totlane, dat.densityrv, dat.densityav)[0]            totlcr = self.getRate(dat.density, dat.avlane, dat.rvlane, dat.totlane, dat.densityrv, dat.densityav)[1]            plt.plot(dens,totlcr, alpha=0.9, label=dat.name)           # plt.scatter(dens,totlcr, alpha=0.9)            plt.ylabel(label)            plt.legend()            plt.xlabel("System Density")            plt.title(title)          #  plt.ylim(0.025,0.20)        plt.savefig("/Users/sshanto/techmrt/Python_new/draft_2/experiment_2/figures/run_9_paper/combined/"+title.replace(" ", "_")+".png")        plt.show()            def plotProb(self,label,title):        for dat in self.data:            plt.plot(dat.updates,dat.prob, alpha=0.9, label=dat.name)            plt.ylabel(label)            plt.legend()            plt.xlabel("Timesteps")            plt.title(title)          #  plt.ylim(0.025,0.20)        plt.savefig("/Users/sshanto/techmrt/Python_new/draft_2/experiment_2/figures/run_9_paper/combined/"+title.replace(" ", "_")+".png")        plt.show()        def plotFlow(self,label,title):        for dat in self.data:            plt.plot(dat.updates,dat.flow, alpha=0.9, label=dat.name)            plt.ylabel(label)            plt.legend()            plt.xlabel("Timesteps")            plt.title(title)        plt.savefig("/Users/sshanto/techmrt/Python_new/draft_2/experiment_2/figures/run_9_paper/combined/"+title.replace(" ", "_")+".png")        plt.show()        def plotTotLane(self,label,title):        for dat in self.data:            plt.plot(dat.updates,dat.totlane, alpha=0.9, label=dat.name)            plt.ylabel(label)            plt.legend()            plt.xlabel("Timesteps")            plt.title(title)         #   plt.ylim(0,36000)        plt.savefig("/Users/sshanto/techmrt/Python_new/draft_2/experiment_2/figures/run_9_paper/combined/"+title.replace(" ", "_")+".png")        plt.show()    def plotAVLane(self,label,title):        for dat in self.data:            plt.plot(dat.updates,dat.avlane, alpha=0.9, label=dat.name)            plt.ylabel(label)            plt.legend()            plt.xlabel("Timesteps")            plt.title(title)         #   plt.ylim(0,20000)        plt.savefig("/Users/sshanto/techmrt/Python_new/draft_2/experiment_2/figures/run_9_paper/combined/"+title.replace(" ", "_")+".png")        plt.show()            def plotRVLane(self,label,title):        for dat in self.data:            plt.plot(dat.updates,dat.rvlane, alpha=0.9, label=dat.name)            plt.ylabel(label)            plt.legend()            plt.xlabel("Timesteps")            plt.title(title)          #  plt.ylim(0,18000)        plt.savefig("/Users/sshanto/techmrt/Python_new/draft_2/experiment_2/figures/run_9_paper/combined/"+title.replace(" ", "_")+".png")        plt.show()    def plotAvgClusNum(self,label,title):        for dat in self.data:          #  plt.plot(dat.updates,dat.clnum, alpha=0.9, label=dat.name)            plt.plot(dat.updates, self.smooth(dat.clnum, 500), lw=1, label=dat.name)            plt.ylabel(label)            plt.legend()            plt.xlabel("Timesteps")            plt.title(title)            plt.ylim(0,6)        plt.savefig("/Users/sshanto/techmrt/Python_new/draft_2/experiment_2/figures/run_9_paper/combined/"+title.replace(" ", "_")+".png")        plt.show()    def plotAvgClusSize(self,label,title):        for dat in self.data:        #    plt.plot(dat.updates,dat.avgclsize, alpha=0.9, label=dat.name)            plt.plot(dat.updates, self.smooth(dat.avgclsize, 500), lw=1, label=dat.name)            plt.ylabel(label)            plt.legend()            plt.xlabel("Timesteps")            plt.title(title)            plt.ylim(0,13)        plt.savefig("/Users/sshanto/techmrt/Python_new/draft_2/experiment_2/figures/run_9_paper/combined/"+title.replace(" ", "_")+".png")        plt.show()    def smooth(self, y, box_pts):        box = np.ones(box_pts)/box_pts        y_smooth = np.convolve(y, box, mode='same')        return y_smooth        def movingaverage (self, values, window):        weights = np.repeat(1.0, window)/window        sma = np.convolve(values, weights, 'valid')        return sma    def getRate(self, density, avlane, rvlane, totlane, densityrv, densityav):        dens = density[::99]        totlane_dens = totlane[::99]        avlane_dens = avlane[::99]        rvlane_dens = rvlane[::99]        totlane_dens = [totlane_dens[0]] + [totlane_dens[i+1] - totlane_dens[i] for i in range(len(totlane_dens)-1)]        avlane_dens = [avlane_dens[0]] + [avlane_dens[i+1] - avlane_dens[i] for i in range(len(avlane_dens)-1)]        rvlane_dens = [rvlane_dens[0]] + [rvlane_dens[i+1] - rvlane_dens[i] for i in range(len(rvlane_dens)-1)]        densityrv_ = densityrv[::99]        densityav_ = densityav[::99]        numrv = [round(300*i) for i in densityrv_]        numav = [round(300*i) for i in densityav_]                 for i in range(len(avlane_dens)):            avlane_dens[i] = avlane_dens[i] / numav[i]             rvlane_dens[i] = rvlane_dens[i] / numrv[i]             totlane_dens[i] = totlane_dens[i] / (numrv[i] + numav[i] )                    return dens, totlane_dens, avlane_dens, rvlane_dens        def getExp1Plots():     ldo = pd.read_csv("low_density_oppo.txt", header=None)    lda = pd.read_csv("low_density_aware.txt", header=None)    ldoa = pd.read_csv("low_density_aware_oppo.txt", header=None)    ldb1 = pd.read_csv("low_density_base_hv_hway.txt", header=None)    ldb2 = pd.read_csv("low_density_base_hv_like.txt", header=None)            cdo = pd.read_csv("crit_density_oppo.txt", header=None)    cda = pd.read_csv("crit_density_aware.txt", header=None)    cdoa = pd.read_csv("crit_density_aware_oppo.txt", header=None)    cdb1 = pd.read_csv("crit_density_base_hv_hway.txt", header=None)    cdb2 = pd.read_csv("crit_density_base_hv_like.txt", header=None)            hdo = pd.read_csv("high_density_oppo.txt", header=None)    hda = pd.read_csv("high_density_aware.txt", header=None)    hdoa = pd.read_csv("high_density_aware_oppo.txt", header=None)    hdb1 = pd.read_csv("high_density_base_hv_hway.txt", header=None)    hdb2 = pd.read_csv("high_density_base_hv_like.txt", header=None)    ldo = DataFrame(ldo, "Opportunistic")    lda = DataFrame(lda, "Neighbor Aware")    ldoa = DataFrame(ldoa, "Opportunistic and Neighbor Aware")    ldb1 = DataFrame(ldb1, "Baseline Headway")    ldb2 = DataFrame(ldb2, "Baseline")            cdo = DataFrame(cdo, "Opportunistic")    cda = DataFrame(cda, "Neighbor Aware")    cdoa = DataFrame(cdoa, "Opportunistic and Neighbor Aware")    cdb1 = DataFrame(cdb1, "Baseline Headway")    cdb2 = DataFrame(cdb2, "Baseline")        hdo = DataFrame(hdo, "Opportunistic")    hda = DataFrame(hda, "Neighbor Aware")    hdoa = DataFrame(hdoa, "Opportunistic and Neighbor Aware")    hdb1 = DataFrame(hdb1, "Baseline Headway")    hdb2 = DataFrame(hdb2, "Baseline")    low = CombinedDataFrame("Low Density", ldo, lda, ldoa, ldb1,ldb2)         low.plotAll1()        crit = CombinedDataFrame("Critical Density", cdo, cda, cdoa, cdb1,cdb2)         crit.plotAll1()    #plt.show()        high = CombinedDataFrame("High Density", hdo, hda, hdoa, hdb1,hdb2)         high.plotAll1()    #plt.show()    def getExp2Plots():    root = "/Users/sshanto/techmrt/Python_new/draft_2/experiment_2/data_files/"    fdo = pd.read_csv(root+"fd_oppo.txt")    fda = pd.read_csv(root+"fd_aware.txt")    fdoa = pd.read_csv(root+"fd_aware_oppo.txt")    fdb1 = pd.read_csv(root+"fd_base_hvlike.txt")    fdb2 = pd.read_csv(root+"fd_base_hway.txt")    fdo = DataFrame(fdo, "Opportunistic")    fda = DataFrame(fda, "Neighbor Aware")    fdoa = DataFrame(fdoa, "Opp. & Nei. Aware")    fdb1 = DataFrame(fdb1, "Baseline Headway")    fdb2 = DataFrame(fdb2, "Baseline")        fd = CombinedDataFrame("", fdo, fda, fdoa, fdb1,fdb2)     fd.plotAll2()        getExp2Plots()                                                