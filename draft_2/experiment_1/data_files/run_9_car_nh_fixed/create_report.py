import pandas as pdimport numpy as npimport matplotlib.pyplot as pltldo = pd.read_csv("low_density_oppo.txt", header=None)lda = pd.read_csv("low_density_aware.txt", header=None)ldoa = pd.read_csv("low_density_aware_oppo.txt", header=None)ldb1 = pd.read_csv("low_density_base_hv_hway.txt", header=None)ldb2 = pd.read_csv("low_density_base_hv_like.txt", header=None)cdo = pd.read_csv("crit_density_oppo.txt", header=None)cda = pd.read_csv("crit_density_aware.txt", header=None)cdoa = pd.read_csv("crit_density_aware_oppo.txt", header=None)cdb1 = pd.read_csv("crit_density_base_hv_hway.txt", header=None)cdb2 = pd.read_csv("crit_density_base_hv_like.txt", header=None)hdo = pd.read_csv("high_density_oppo.txt", header=None)hda = pd.read_csv("high_density_aware.txt", header=None)hdoa = pd.read_csv("high_density_aware_oppo.txt", header=None)hdb1 = pd.read_csv("high_density_base_hv_hway.txt", header=None)hdb2 = pd.read_csv("high_density_base_hv_like.txt", header=None)class DataFrame:    def __init__(self,data, name):        self.data = data        self.data.columns = ["Density", "Flow", "Updates", "Density (HV)", "Flow (HV)", "Density (AV)",                              "Flow (AV)", "Number of Clusters","Average Cluster Size", "Probability of AV-AV", "Total Number of Lane Changes",                             "Total Number of Lane Changes (AV)", "Total Number of Lane Changes (HV)", "Clusterability"]                            self.density, self.flow, self.updates, self.densityrv, self.flowrv, self.densityav, self.flowav, self.clnum, self.avgclsize, self.prob, self.totlane, self.avlane, self.rvlane, self.carclus =  [           self.data[i].values for i in self.data.columns]         self.name = name        def printData(self):        print(self.data)        def getAverages(self):        print(self.data.mean())                    def getStats(self):        print("\nStatistical measures of terms:\n")        print(self.data.describe())        print("\nCorrelation between terms:\n")        print(self.data.corr())        print("\nCovariance between terms:\n")        print(self.data.cov())            def plotGraphs(self):        for i in self.data.columns:            plt.figure()            plt.plot(self.data[i])            plt.ylabel(i)            plt.xlabel("Timesteps")            plt.show()        def getDensity(self):        return self.data["Density"].values            ldo = DataFrame(ldo, "Opportunistic")lda = DataFrame(lda, "Neighbor Aware")ldoa = DataFrame(ldoa, "Opportunistic and Neighbor Aware")ldb1 = DataFrame(ldb1, "Baseline Headway")ldb2 = DataFrame(ldb2, "Baseline")cdo = DataFrame(cdo, "Opportunistic")cda = DataFrame(cda, "Neighbor Aware")cdoa = DataFrame(cdoa, "Opportunistic and Neighbor Aware")cdb1 = DataFrame(cdb1, "Baseline Headway")cdb2 = DataFrame(cdb2, "Baseline")hdo = DataFrame(hdo, "Opportunistic")hda = DataFrame(hda, "Neighbor Aware")hdoa = DataFrame(hdoa, "Opportunistic and Neighbor Aware")hdb1 = DataFrame(hdb1, "Baseline Headway")hdb2 = DataFrame(hdb2, "Baseline")#ldo.getStats()class CombinedDataFrame:    def __init__(self,regime,o,a,oa,b1,b2):        self.o = o        self.a = a        self.oa = oa        self.b1 = b1        self.b2 = b2        self.data = [self.o,self.a,self.oa,self.b1,self.b2]        self.regime = regime            def plotAll(self):        self.plotProb("Probability of AV - AV", "Probability over time ("+str(self.regime)+")")      #  self.plotFlow("Flow", "Flow over time ("+str(self.regime)+")")        self.plotTotLane("Total Number of Lane Changes", "Lane changes over time ("+str(self.regime)+")")            def plotProb(self,label,title):        for dat in self.data:            plt.plot(dat.updates,dat.prob, alpha=0.9, label=dat.name)            plt.ylabel(label)            plt.legend()            plt.xlabel("Timesteps")            plt.title(title)        plt.show()        def plotFlow(self,label,title):        for dat in self.data:            plt.plot(dat.updates,dat.flow, alpha=0.9, label=dat.name)            plt.ylabel(label)            plt.legend()            plt.xlabel("Timesteps")            plt.title(title)        plt.show()        def plotTotLane(self,label,title):        for dat in self.data:            plt.plot(dat.updates,dat.totlane, alpha=0.9, label=dat.name)            plt.ylabel(label)            plt.legend()            plt.xlabel("Timesteps")            plt.title(title)        plt.show()    low = CombinedDataFrame("Low Density", ldo, lda, ldoa, ldb1,ldb2)     low.plotAll()crit = CombinedDataFrame("Critical Density", cdo, cda, cdoa, cdb1,cdb2)     crit.plotAll()#plt.show()high = CombinedDataFrame("High Density", hdo, hda, hdoa, hdb1,hdb2)     high.plotAll()#plt.show()